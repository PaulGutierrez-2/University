// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones con roles
  userRoles UserRole[]

  // Relaciones específicas (opcional - para enlaces directos)
  student   Student?
  professor Professor?

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  resource    String // ej: "student", "professor", "degree", "subject"
  action      String // ej: "read", "write", "delete", "manage"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  // Campos de contexto (opcional)
  degreeId  Int? // Para roles específicos de carrera
  subjectId Int? // Para roles específicos de materia

  assignedAt DateTime @default(now())
  assignedBy Int? // ID del usuario que asignó el rol
  isActive   Boolean  @default(true)

  // Relaciones
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  degree  Degree?  @relation(fields: [degreeId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])

  @@unique([userId, roleId, degreeId, subjectId])
  @@map("user_roles")
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  // Relaciones
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Degree {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subjects   Subject[]
  students   Student[]   @relation("StudentsDegrees")
  professors Professor[] @relation("ProfessorsDegrees")
  userRoles  UserRole[] // Para roles específicos de carrera

  @@map("degrees")
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  degreeId  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  degree     Degree      @relation(fields: [degreeId], references: [id])
  students   Student[]   @relation("StudentsSubjects")
  professors Professor[] @relation("ProfessorsSubjects")
  userRoles  UserRole[] // Para roles específicos de materia

  @@map("subjects")
}

model Professor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  subjects Subject[] @relation("ProfessorsSubjects")
  degrees  Degree[]  @relation("ProfessorsDegrees")

  @@map("professors")
}

model Student {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  degrees  Degree[]  @relation("StudentsDegrees")
  subjects Subject[] @relation("StudentsSubjects")

  @@map("students")
}
